import telebot
import requests
import json
import speech_recognition as sr
import os
import subprocess
import datetime
from telebot import types
from dotenv import load_dotenv, find_dotenv


class CHATGPT:
    def __init__(self, chatgpt_api_key):
        self.messages = []
        self.api_key = chatgpt_api_key

    def get_message(self, message):
        self.messages.append({'role': 'user', "content": message})
        headers = {"Authorization": self.api_key, "Content-Type": "application/json"}
        body = {
            "model": "gpt-3.5-turbo",
            "messages": self.messages,
            "max_tokens": 1000,
            "temperature": 0.7
        }
        jsondata = json.dumps(body, ensure_ascii=False).encode('UTF8')
        web = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, data=jsondata)
        answer = web.json()['choices'][0]['message']['content']
        self.messages.append({'role': 'assistant', "content": answer})
        return answer


load_dotenv(find_dotenv())
chatgpt = CHATGPT(os.getenv('chat_gpt_api_key'))
bot = telebot.TeleBot(os.getenv('TOKEN'))
logfile = str(datetime.date.today()) + '.log'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".vaw" –≤ —Ç–µ–∫—Å—Ç
def audio_to_text(dest_name: str):
    r = sr.Recognizer()
    message = sr.AudioFile(dest_name)
    with message as source:
        audio = r.record(source)
    result = r.recognize_google(audio, language="ru_RU")
    return result


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/help")
    markup.add(item1)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç ‚úå \n –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è —Å GPT3. \n –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ.",
                     reply_markup=markup)


@bot.message_handler(content_types=['text'])
def message_reply(message):
    if message.text == "/help":
        help = "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. \n\n" \
               "‚úç–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –æ—Ç–≤–µ—Ç–æ–º, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª—å—é ChatGPT.\n" \
               "üì¢–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —á–∞—Ç–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ë–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–≤—É–∫ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏, –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–µ–ª—å ChatGPT –∏ –æ—Ç–≤–µ—Ç–∏—Ç.\n " \
               "ü§å–ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã, –æ–∂–∏–¥–∞—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö/–∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π. –ë–æ—Ç—É –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n " \
               "‚òù–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ç–∫–∏–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –±–æ—Ç–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n" \
               "üòâ–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º —Å –±–æ—Ç–æ–º Telegram –∏ –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è!"
        bot.send_message(message.chat.id, help)
    else:
        bot.send_message(message.chat.id, 'üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...')
        answer = chatgpt.get_message(message.text)
        bot.send_message(message.chat.id, answer)


@bot.message_handler(content_types=['voice', 'audio'])
def voice_processing(message):
    try:
        file_info = bot.get_file(message.voice.file_id)
        path = file_info.file_path
        fname = os.path.basename(path)
        doc = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(os.getenv('TOKEN'), file_info.file_path))
        with open(fname + '.oga', 'wb') as f:
            f.write(doc.content)
        process = subprocess.run(['ffmpeg', '-i', fname + '.oga', fname + '.wav'])
        result = audio_to_text(fname + '.wav')
        bot.send_message(message.from_user.id, f" –í–∞—à –∑–∞–ø—Ä–æ—Å: \n {result}")
        bot.send_message(message.chat.id, 'üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...')
        answer = chatgpt.get_message(result)
        bot.send_message(message.chat.id, answer)

    except sr.UnknownValueError as e:
        bot.send_message(message.from_user.id, "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ...")
        with open(logfile, 'a', encoding='utf-8') as f:
            f.write(str(datetime.datetime.today().strftime("%H:%M:%S")) + ':' + str(message.from_user.id) + ':' + str(
                message.from_user.first_name) + '_' + str(message.from_user.last_name) + ':' + str(
                message.from_user.username) + ':' + str(message.from_user.language_code) + ':Message is empty.\n')
    except Exception as e:
        bot.send_message(message.from_user.id, "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ...")
        with open(logfile, 'a', encoding='utf-8') as f:
            f.write(str(datetime.datetime.today().strftime("%H:%M:%S")) + ':' + str(message.from_user.id) + ':' + str(
                message.from_user.first_name) + '_' + str(message.from_user.last_name) + ':' + str(
                message.from_user.username) + ':' + str(message.from_user.language_code) + ':' + str(e) + '\n')
    finally:
        os.remove(fname + '.wav')
        os.remove(fname + '.oga')


bot.infinity_polling()
