import telebot
import requests
import json
import speech_recognition as sr
import os
import subprocess
import datetime
import logging
from telebot import types
from dotenv import load_dotenv, find_dotenv


class CHATGPT:
    def __init__(self, api_key):
        self.api_key = api_key
        self.messages = []

    def get_message(self, message):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages.append({'role': 'user', "content": message})
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = {
            "model": "gpt-4o-mini",
            "messages": self.messages,
            "max_tokens": 1000,
            "temperature": 0.7
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç JSON
        jsondata = json.dumps(body, ensure_ascii=False).encode('UTF8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ API OpenAI
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, data=jsondata)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            answer = response.json()['choices'][0]['message']['content']
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            self.messages.append({'role': 'assistant', "content": answer})
            return answer
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            print(f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."

load_dotenv(find_dotenv())
chatgpt = CHATGPT(os.getenv('chat_gpt_api_key'))
bot = telebot.TeleBot(os.getenv('TOKEN'))
logfile = str(datetime.date.today()) + '.log'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".vaw" –≤ —Ç–µ–∫—Å—Ç
def audio_to_text(dest_name: str):
    r = sr.Recognizer()
    message = sr.AudioFile(dest_name)
    with message as source:
        audio = r.record(source)
    result = r.recognize_google(audio, language="ru_RU")
    return result



@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç")
    item3 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ")
    item4 = types.KeyboardButton("/help")
    item5 = types.KeyboardButton("/stop")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    markup.add(item1, item2, item3, item4, item5)

    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç")
def handle_text(message):
    bot.send_message(message.chat.id, "‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É –í–∞–º.")

@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ")
def handle_audio(message):
    bot.send_message(message.chat.id, "üì¢ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —á–∞—Ç–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n –Ø –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—á—É –í–∞–º.\n")

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã. \n\n" \
               "‚úç –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –æ—Ç–≤–µ—Ç–æ–º, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª—å—é ChatGPT.\n" \
               "üì¢ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —á–∞—Ç–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ë–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–≤—É–∫ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏, –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–µ–ª—å ChatGPT –∏ –æ—Ç–≤–µ—Ç–∏—Ç.\n " \
               "‚è±Ô∏è –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã, –æ–∂–∏–¥–∞—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö/–∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π. –ë–æ—Ç—É –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n " \
               "‚òù –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ç–∫–∏–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –±–æ—Ç–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
stop_polling = False

@bot.message_handler(commands=['stop'])
def stop_polling_handler(message):
    bot.send_message(message.chat.id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    global stop_polling
    stop_polling = True

def run_bot():
    while not stop_polling:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(content_types=['text'])
def message_reply(message):
    bot.send_message(message.chat.id, 'üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...')
    answer = chatgpt.get_message(message.text)
    bot.send_message(message.chat.id, answer)

@bot.message_handler(content_types=['voice', 'audio'])
def voice_processing(message):
    bot.send_message(message.chat.id, 'üåÄ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç...')
    try:
        file_info = bot.get_file(message.voice.file_id)
        path = file_info.file_path
        fname = os.path.basename(path)
        doc = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(os.getenv('TOKEN'), file_info.file_path))
        with open(fname + '.oga', 'wb') as f:
            f.write(doc.content)
        process = subprocess.run(['ffmpeg', '-i', fname + '.oga', fname + '.wav'])
        result = audio_to_text(fname + '.wav')
        bot.send_message(message.from_user.id, f" –í–∞—à –∑–∞–ø—Ä–æ—Å: \n {result}")
        bot.send_message(message.chat.id, 'üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...')
        answer = chatgpt.get_message(result)
        bot.send_message(message.chat.id, answer)

    except sr.UnknownValueError as e:
        bot.send_message(message.from_user.id, "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ...")
        with open(logfile, 'a', encoding='utf-8') as f:
            f.write(str(datetime.datetime.today().strftime("%H:%M:%S")) + ':' + str(message.from_user.id) + ':' + str(
                message.from_user.first_name) + '_' + str(message.from_user.last_name) + ':' + str(
                message.from_user.username) + ':' + str(message.from_user.language_code) + ':Message is empty.\n')
    except Exception as e:
        bot.send_message(message.from_user.id, "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ...")
        with open(logfile, 'a', encoding='utf-8') as f:
            f.write(str(datetime.datetime.today().strftime("%H:%M:%S")) + ':' + str(message.from_user.id) + ':' + str(
                message.from_user.first_name) + '_' + str(message.from_user.last_name) + ':' + str(
                message.from_user.username) + ':' + str(message.from_user.language_code) + ':' + str(e) + '\n')
    finally:
        os.remove(fname + '.wav')
        os.remove(fname + '.oga')

bot.infinity_polling()
